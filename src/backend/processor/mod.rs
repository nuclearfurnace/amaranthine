// Copyright (c) 2018 Nuclear Furnace
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
mod errors;
pub use self::errors::ProcessorError;

//mod mock;
//pub use self::mock::MockProcessor;

use crate::{
    common::{EnqueuedRequests, Message, MessageState, ConnectionFuture},
};
use std::{fmt::Display, net::SocketAddr, sync::Arc};
use tokio::io::{AsyncRead, AsyncWrite};
use tokio::net::TcpStream;

#[cfg(test)]
use mockall::automock;

#[cfg(test)]
use crate::{
    util::MockStream,
    protocol::mock::{MockMessage, MockTransport},
};

/// Cache-specific logic for processing requests and interacting with backends.
#[cfg_attr(test, automock(type Message = MockMessage; type Transport = MockTransport<MockStream>;))]
pub trait Processor<RW = TcpStream>
where
    RW: AsyncRead + AsyncWrite + 'static
{
    type Message: Message + Clone;
    type Transport;

    /// Fragments a client's request into, potentially, multiple subrequests.
    ///
    /// This allows multi-operation requests -- multi-key lookups, etc -- to be sharded to the
    /// correct backend server when routed.
    fn fragment_message(&self, msg: Self::Message) -> Result<Vec<(MessageState, Self::Message)>, ProcessorError>;

    /// Defragments a client's subrequests into a single request.
    ///
    /// This is used to do any coalesing necessary to assemble multiple subrequests -- generated by
    /// `fragment_messages` -- back into a cohesive response that the client will understand.
    fn defragment_message(&self, fragments: Vec<(MessageState, Self::Message)>) -> Result<Self::Message, ProcessorError>;

    /// Converts the given error into a corresponding format that can be sent to the client.
    fn get_error_message<E: Display + 'static>(&self, error: E) -> Self::Message;

    /// Wraps the given TCP stream with a protocol-specific transport layer, allowing the caller to
    /// extract protocol-specific messages, as well as send them, via the `Stream` and `Sink`
    /// implementations.
    fn get_transport(&self, rw: RW) -> Self::Transport;

    /// Connects to the given address via TCP and performs any necessary processor-specific
    /// initialization.
    fn preconnect(&self, addr: SocketAddr, noreply: bool) -> ConnectionFuture<RW>;

    /// Processes a batch of requests, running the necessary operations against the given TCP
    /// stream.
    fn process(&self, msgs: EnqueuedRequests<Self::Message>, rw: RW) -> ConnectionFuture<RW>;
}

impl<P, RW> Processor<RW> for Arc<P>
where
    P: Processor<RW>,
    RW: AsyncRead + AsyncWrite + 'static,
{
    type Message = P::Message;
    type Transport = P::Transport;

    fn fragment_message(&self, msg: Self::Message) -> Result<Vec<(MessageState, Self::Message)>, ProcessorError> {
        (**self).fragment_message(msg)
    }

    fn defragment_message(&self, fragments: Vec<(MessageState, Self::Message)>) -> Result<Self::Message, ProcessorError> {
        (**self).defragment_message(fragments)
    }

    fn get_error_message<E: Display + 'static>(&self, error: E) -> Self::Message {
        (**self).get_error_message(error)
    }

    fn get_transport(&self, rw: RW) -> Self::Transport {
        (**self).get_transport(rw)
    }

    fn preconnect(&self, addr: SocketAddr, noreply: bool) -> ConnectionFuture<RW> {
        (**self).preconnect(addr, noreply)
    }

    fn process(&self, msgs: EnqueuedRequests<Self::Message>, rw: RW) -> ConnectionFuture<RW> {
        (**self).process(msgs, rw)
    }
}

/*
#[cfg(test)]
mock! {
    pub Processor<RW: AsyncRead + AsyncWrite + Unpin + 'static> {}
    trait Processor<RW: AsyncRead + AsyncWrite + Unpin + 'static> {
        type Message = MockMessage;
        type Transport = MockTransport<RW>;

        fn fragment_message(&self, msg: MockMessage) -> Result<Vec<(MessageState, MockMessage)>, ProcessorError>;
        fn defragment_message(&self, fragments: Vec<(MessageState, MockMessage)>) -> Result<MockMessage, ProcessorError>;
        fn get_error_message<E: Display + 'static>(&self, error: E) -> MockMessage;
        fn get_transport(&self, rw: RW) -> MockTransport<RW>;
        fn preconnect(&self, addr: SocketAddr, noreply: bool) -> ConnectionFuture<RW>;
        fn process(&self, msgs: EnqueuedRequests<MockMessage>, rw: RW) -> ConnectionFuture<RW>;
    }
    trait Clone {
        fn clone(&self) -> Self;
    }
}*/
